<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>協同產品設計實習40423114李希凡</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-06-14T11:00:00+08:00</updated><entry><title>Week17 20170614</title><link href="./Week%2017.html" rel="alternate"></link><published>2017-06-14T11:00:00+08:00</published><updated>2017-06-14T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-06-14:./Week 17.html</id><summary type="html">&lt;p&gt;&lt;b&gt;&lt;font color="red"&gt;期末任務&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;


&lt;p&gt;1.
solvespace 檔案推送&lt;/p&gt;
&lt;iframe src="./../data/w17/40423114.html"width="800"height="600"/&gt;&lt;/iframe&gt;

&lt;p&gt;2.
solvespace 2D 繪圖 程式碼&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZoTcC_v-ejY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;p&gt;&lt;script src="../data/brython-3.3.1/brython.js"&gt;&lt;/script&gt;
&lt;script src="../data/brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

# 設定畫線參數 
    def create_line(self, x1, y1, x2, y2, width=3, fill="#54fff6"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    def create_line2(self, x1, y1, x2, y2, width=3, fill="#54ff5f"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    def create_line3(self, x1, y1, x2, y2, width=3, fill="#f354ff"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()


    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):

        rp = 250
        imax = 15
        m=2*rp/n
        a=m
        d=1.25*m
        ra=rp+a


# self.create_line(起點X, 起點Y, 終點X, 終點Y)
        self.create_line2(200, 200, 100, 200)
        self.create_line3(100, 200, 164.3, 300)
        self.create_line2(164.3, 300, 264.3, 300)
        self.create_line3(264.3, 300, 200,200)




        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(-9, 10, +1):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)   
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;p&gt;3.
子模組建立與運用&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Jpw_npHxvRY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;4.Solvespace 近端零組件繪圖&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/leaxPwJajws" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/w17/tow lag.html"width="600"height="600"&gt;&lt;/iframe&gt;

&lt;ol&gt;
&lt;li&gt;Solvespace 零件轉入 V-rep&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kVrZna1zOi8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;6.行走機構模擬與實作過程負責任務&lt;/p&gt;
&lt;p&gt;正在整理&lt;/p&gt;
&lt;p&gt;7.上傳 Fossil SCM 倉儲&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/21z89AD8ugo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Brython"></category></entry></feed>